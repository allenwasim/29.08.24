import 'dart:io';

import 'package:cloud_firestore/cloud_firestore.dart';
import 'package:firebase_storage/firebase_storage.dart';
import 'package:flutter/services.dart';
import 'package:get/get.dart';
import 'package:image_picker/image_picker.dart';
import 'package:t_store/user_module/data/repositories/authentication/authentication_repository.dart';
import 'package:t_store/utils/exceptions/firebase_exceptions.dart';
import 'package:t_store/utils/exceptions/format_exceptions.dart';
import 'package:t_store/utils/exceptions/platform_exceptions.dart';

class AdminRepository extends GetxController {
  static AdminRepository get instance => Get.find();

  final FirebaseFirestore _db = FirebaseFirestore.instance;
  final AuthenticationRepository _authRepo =
      Get.find<AuthenticationRepository>();

  // Save new programme or update if exists
  Future<String> saveProgramme(Map<String, dynamic> programmeData,
      {String? programmeId}) async {
    try {
      if (programmeId != null) {
        // Update existing programme
        await _db
            .collection("Programmes")
            .doc(programmeId)
            .update(programmeData);
        return programmeId; // Return the existing programmeId after update
      } else {
        // Add new programme
        var docRef = await _db.collection("Programmes").add(programmeData);
        return docRef.id; // Return the new programmeId (generated by Firestore)
      }
    } on FirebaseException catch (e) {
      throw TFirebaseException(e.code).message;
    } catch (e) {
      throw 'Failed to save programme. Please try again.';
    }
  }

  // Save or update level within a specific programme
  Future<void> saveLevel(Map<String, dynamic> levelData,
      {required String programmeId, String? levelId}) async {
    try {
      final levelsCollection =
          _db.collection("Programmes").doc(programmeId).collection("levels");

      if (levelId != null) {
        // Update existing level in the subcollection
        await levelsCollection.doc(levelId).update(levelData);
      } else {
        // Add new level to the subcollection
        await levelsCollection.add(levelData);
      }
    } on FirebaseException catch (e) {
      throw TFirebaseException(e.code).message;
    } catch (e) {
      throw 'Failed to save level. Please try again.';
    }
  }

  // Delete level within a specific programme
  Future<void> deleteLevel(String programmeId, String levelId) async {
    try {
      await _db
          .collection("Programmes")
          .doc(programmeId)
          .collection("levels")
          .doc(levelId)
          .delete();
    } on FirebaseException catch (e) {
      throw TFirebaseException(e.code).message;
    } catch (e) {
      throw 'Failed to delete level. Please try again.';
    }
  }

  // Fetch all levels for a specific programme
  Future<List<Map<String, dynamic>>> getAllLevels(String programmeId) async {
    try {
      final querySnapshot = await _db
          .collection("Programmes")
          .doc(programmeId)
          .collection("levels")
          .get();

      return querySnapshot.docs
          .map((doc) => {
                "id": doc.id,
                ...doc.data(),
              })
          .toList();
    } on FirebaseException catch (e) {
      throw TFirebaseException(e.code).message;
    } catch (e) {
      throw 'Failed to fetch levels. Please try again.';
    }
  }

  // Fetch a specific level by title within a specific programme
  Future<Map<String, dynamic>> getLevelByTitle(
      String programmeId, String title) async {
    try {
      final querySnapshot = await _db
          .collection("Programmes")
          .doc(programmeId)
          .collection("levels")
          .where("title", isEqualTo: title) // Search by title
          .get();

      if (querySnapshot.docs.isNotEmpty) {
        return {
          "id": querySnapshot.docs.first.id,
          ...querySnapshot.docs.first.data()
        };
      } else {
        throw 'Level with title "$title" not found.';
      }
    } on FirebaseException catch (e) {
      throw TFirebaseException(e.code).message;
    } catch (e) {
      throw 'Failed to fetch level by title. Please try again.';
    }
  }

  // Upload image to Firebase Storage
  Future<String> uploadImage(String path, XFile image) async {
    try {
      final ref = FirebaseStorage.instance.ref(path).child(image.name);

      await ref.putFile(File(image.path));

      final url = await ref.getDownloadURL();
      return url;
    } on FirebaseException catch (e) {
      throw TFirebaseException(e.code).message;
    } on FormatException catch (_) {
      throw const TFormatException().message;
    } on PlatformException catch (e) {
      throw TPlatformException(e.code).message;
    } catch (e) {
      throw 'Something went wrong. Please try again.';
    }
  }

  // Update user profile with a single field update
  Future<void> updateSingleField(Map<String, dynamic> json) async {
    try {
      await _db.collection("Users").doc(_authRepo.authUser?.uid).update(json);
    } on FirebaseException catch (e) {
      throw TFirebaseException(e.code).message;
    } on FormatException catch (_) {
      throw const TFormatException().message;
    } on PlatformException catch (e) {
      throw TPlatformException(e.code).message;
    } catch (e) {
      throw 'Something went wrong. Please try again.';
    }
  }
}
